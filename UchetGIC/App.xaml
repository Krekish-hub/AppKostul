<Application x:Class="UchetGIC.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:UchetGIC"
             StartupUri="MainWindow.xaml">
    
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Teal.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style x:Key="CircularTextBlockStyle" TargetType="Label">
                <Setter Property="Background" Value="Red"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="Width" Value="25"/>
                <Setter Property="Height" Value="25"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Right"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Label">
                            <Border Background="{TemplateBinding Background}"
                                    Width="{TemplateBinding Width}"
                                    Height="{TemplateBinding Height}"
                                    CornerRadius="0 5 5 0"
                                    VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                    HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                    Margin="{TemplateBinding Margin}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="MenuCheckBox" TargetType="CheckBox">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontFamily" Value="Bahnschrift SemiBold"/>
            <Setter Property="Height" Value="Auto"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="Width" Value="150"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <Border x:Name="border" Background="{TemplateBinding Background}" CornerRadius="2">
                            <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="LightGray"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="border" Property="Background" Value="DarkGray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Rectangle x:Name="Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels="True"/>
                            <Polygon x:Name="Arrow" Fill="Black" HorizontalAlignment="Right" Margin="8,8,3,3" Opacity="0.15" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Fill" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type DataGrid}">
            <Setter Property="AlternatingRowBackground" 
                        Value="Transparent"/>
            <Setter Property="Background"
                        Value="Transparent"/>
            <Setter Property="RowBackground"
                        Value="Transparent"/>
            <Setter Property="BorderThickness" 
                        Value="2"/>
            <Setter Property="Foreground" 
                        Value="Black"/>
            <Setter Property="BorderBrush" 
                        Value="Transparent"/>
            <Setter Property="IsReadOnly"
                        Value="True"/>
            <Setter Property="GridLinesVisibility" 
                        Value="Horizontal"/>
            <Setter Property="HorizontalGridLinesBrush" 
                        Value="{DynamicResource DataGrid.Grid.HorizontalLineBrush}"/>
            <Setter Property="HeadersVisibility" 
                        Value="Column"/>
            <Setter Property="RowDetailsVisibilityMode"
                        Value="VisibleWhenSelected"/>
            <Setter Property="ScrollViewer.CanContentScroll" 
                        Value="False"/>
            <Setter Property="SelectionMode" 
                        Value="Extended"/>
            <Setter Property="FontSize"
                        Value="14"/>
            <Setter Property="HeadersVisibility"
                        Value="Column"/>
            <Setter Property="ScrollViewer.PanningMode" 
                        Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" 
                        Value="False"/>
            <Setter Property="AutoGenerateColumns"
                        Value="False"/>
            <Setter Property="HorizontalScrollBarVisibility"
                        Value="Hidden"/>
            <Setter Property="VerticalScrollBarVisibility"
                        Value="Hidden"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGrid}">
                        <Border 
                            Background="White" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                                <ScrollViewer.Template>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Button 
                                                Command="{x:Static DataGrid.SelectAllCommand}" 
                                                Focusable="false" 
                                                Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                            <DataGridColumnHeadersPresenter 
                                                x:Name="PART_ColumnHeadersPresenter" 
                                                Grid.Column="1" 
                                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                            <ScrollContentPresenter 
                                                x:Name="PART_ScrollContentPresenter" 
                                                CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
                                            <ScrollBar 
                                                x:Name="PART_VerticalScrollBar" 
                                                Grid.Column="2" 
                                                Maximum="{TemplateBinding ScrollableHeight}" 
                                                Orientation="Vertical" 
                                                Grid.Row="1" 
                                                Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                                            <Grid 
                                                Grid.Column="1" Grid.Row="2">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition
                                                        Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollBar 
                                                    x:Name="PART_HorizontalScrollBar" 
                                                    Grid.Column="1" 
                                                    Maximum="{TemplateBinding ScrollableWidth}" 
                                                    Orientation="Horizontal" 
                                                    Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </ScrollViewer.Template>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="TextBlock" x:Key="Login">
            <Setter Property="Grid.Row" Value="0"/>
            <Setter Property="Grid.ColumnSpan" Value="2"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="34"/>
            <Setter Property="FontFamily" Value="Bahnschrift SemiBold"/>
        </Style>
        <Style TargetType="TextBlock" x:Key="TxtBlock1">
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontFamily" Value="Bahnschrift SemiBold"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="Width" Value="80"/>
            <Setter Property="TextAlignment" Value="Right"/>
            <Setter Property="Margin" Value="5"/>
        </Style>

        <Storyboard x:Key="BorderAnimation">
            <ColorAnimation Storyboard.TargetProperty="(TextBox.BorderBrush).(SolidColorBrush.Color)"
                        To="Black" Duration="0:0:0.5" AutoReverse="True" />
        </Storyboard>
        <Style TargetType="TextBox" x:Key="TxtBox1">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontFamily" Value="Bahnschrift SemiBold"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="Width" Value="80"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Grid.Column" Value="1"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="BorderThickness" Value="0 0 0 1"/>
            <Style.Triggers>
                <!-- Триггер для анимации при наведении -->
                <EventTrigger RoutedEvent="UIElement.KeyDown">
                    <BeginStoryboard Storyboard="{StaticResource BorderAnimation}" />
                </EventTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="TextBox">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontFamily" Value="Bahnschrift SemiBold"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="Width" Value="80"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Grid.Column" Value="1"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="BorderThickness" Value="0 0 0 1"/>
            <Style.Triggers>
                <!-- Триггер для анимации при наведении -->
                <EventTrigger RoutedEvent="UIElement.KeyDown">
                    <BeginStoryboard Storyboard="{StaticResource BorderAnimation}" />
                </EventTrigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="PasswordBox" x:Key="PsbBox">
            <Setter Property="HorizontalAlignment" Value="Left"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontFamily" Value="Bahnschrift SemiBold"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="Width" Value="80"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Grid.Column" Value="1"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="BorderThickness" Value="0 0 0 1"/>
        </Style>
        <Style TargetType="Button" x:Key="OK">
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontFamily" Value="Bahnschrift SemiBold"/>
            <Setter Property="Height" Value="Auto"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="Width" Value="100"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Grid.ColumnSpan" Value="2"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            CornerRadius="2">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="LightGray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="Button" x:Key="Menu">
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="36"/>
            <Setter Property="FontFamily" Value="Bahnschrift SemiBold"/>
            <Setter Property="Opacity" Value="0.3"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Grid.ColumnSpan" Value="2"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="border"
                    Background="{TemplateBinding Background}"
                    CornerRadius="2">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="Background" Value="LightGray"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="CheckBox">
            <Setter Property="Foreground" Value="#333333"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Border 
                                x:Name="CheckBoxBorder"
                                Grid.Column="0"
                                Background="Transparent"
                                BorderThickness="1"
                                BorderBrush="#CCCCCC"
                                CornerRadius="3">
                                <Grid Width="16" Height="16" Background="Transparent">
                                    <Path 
                                        x:Name="CheckMark"
                                        Stroke="#007ACC"
                                        StrokeThickness="2"
                                        Data="M 0,5 L 5,10 L 15,0"
                                        Visibility="Collapsed"/>
                                </Grid>
                            </Border>
                            <ContentPresenter 
                                Grid.Column="1"
                                Margin="5,0,0,0"
                                Content="{TemplateBinding Content}"
                                VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="CheckBoxBorder" Property="BorderBrush" Value="#007ACC"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckBoxBorder" Property="Background" Value="#007ACC"/>
                                <Setter TargetName="CheckBoxBorder" Property="BorderBrush" Value="#007ACC"/>
                                <Setter TargetName="CheckMark" Property="Stroke" Value="White"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
